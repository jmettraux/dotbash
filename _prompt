
#
# prompt

#
# Set our bash prompt according to the branch/status of the current git
# repository.
#
# Forked from http://gist.github.com/31934
# http://gist.github.com/70150
#

        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

function is_git_repository {
  git branch > /dev/null 2>&1
}

function parse_git_branch {
  # Only display git info if we're inside a git repository.
  is_git_repository || return 1

  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes not staged for commit:" ]]; then
    state="${RED}"
  elif [[ ${git_status} =~ "Changes to be committed:" ]]; then
    state="${YELLOW}"
  else
    state="${GREEN}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  fi
  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch_pattern="On branch ([^${IFS}]+)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Display the prompt.
  echo "${state}(${branch})${remote}${COLOR_NONE} "
}

_UN=`uname -a`
_OS_CHAR="不"
if [[ ${_UN} == *Linux* ]]; then
  _OS_CHAR="リ"
elif [[ ${_UN} == *Darwin* ]]; then
  _OS_CHAR="ダ"
elif [[ ${_UN} == *FreeBSD* ]]; then
  _OS_CHAR="フ"
elif [[ ${_UN} == *OpenBSD* ]]; then
  _OS_CHAR="オ"
fi

_DOLLAR_CHAR="${_DOLLAR_CHAR-${_OS_CHAR-〒}}"

function prompt_symbol () {
  # Set color of dollar prompt based on return value of previous command.
  if test $1 -eq 0; then
      #echo "〒"
      echo ${_DOLLAR_CHAR}
  else
      echo "${RED}${_DOLLAR_CHAR}${COLOR_NONE}"
  fi
}

function prompt_func () {
  last_return_value=$?
  #PS1="\u@\h \w $(parse_git_branch)$(prompt_symbol $last_return_value) "
  #PS1="\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \[\033[00m\]$(parse_git_branch)$(prompt_symbol $last_return_value) "
  user=${_USER_CHAR-${USER}}
  if [[ $USER == "root" ]]; then user="車"; fi
  PS1="$(date "+%H%M%S") \h \[\033[01;32m\]$user \w \[\033[00m\]$(parse_git_branch)$(prompt_symbol $last_return_value) "
}

PROMPT_COMMAND=prompt_func
  # bash calls this command to determine the prompt, each time

# vim: set ft=sh:

